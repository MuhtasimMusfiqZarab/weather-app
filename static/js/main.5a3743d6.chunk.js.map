{"version":3,"sources":["components/Title.js","components/InputForm.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Title","react_default","a","createElement","className","InputForm","props","action","onSubmit","fetchWeather","type","name","placeholder","Weather","city","country","temperature","toFixed","humidity","description","toUpperCase","error","API_KEY","App","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","console","log","_this","setState","main","temp","sys","weather","stop","this","components_Title","components_InputForm","components_Weather","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5a3743d6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nconst Title = () => (\n  <div>\n    <h1 className=\"title-container__title\">Get Weather Information</h1>\n    <p className=\"title-container__subtitle\">\n      Find Out Temperature, Humidity of Any City{\" \"}\n    </p>\n  </div>\n);\n\nexport default Title;\n","import React, { Component } from \"react\";\n\nconst InputForm = props => (\n  <form action=\"\" onSubmit={props.fetchWeather}>\n    <input type=\"text\" name=\"city\" placeholder=\"Enter City ..\" />\n    <input type=\"text\" name=\"country\" placeholder=\"Enter Country ..\" />\n    <button>Fetch Weather</button>\n  </form>\n);\nexport default InputForm;\n","import React, { Component } from \"react\";\n\nconst Weather = props => (\n  <div className=\"weather__info\">\n    {props.city && props.country && (\n      <p className=\"weather__key\">\n        Location:{\" \"}\n        <span className=\"weather__value\">\n          {\" \"}\n          {props.city},{props.country}\n        </span>\n      </p>\n    )}\n\n    {props.temperature && (\n      <p className=\"weather__key\">\n        Temperature:{\" \"}\n        <span className=\"weather__value\">\n          {\" \"}\n          {(props.temperature - 273.16).toFixed(2)}Â° Celcius\n        </span>\n      </p>\n    )}\n    {props.humidity && (\n      <p className=\"weather__key\">\n        Humidity: <span className=\"weather__value\"> {props.humidity}%</span>\n      </p>\n    )}\n    {props.description && (\n      <p className=\"weather__key\">\n        Description:{\" \"}\n        <span className=\"weather__value\">\n          {\" \"}\n          {props.description.toUpperCase()}\n        </span>\n      </p>\n    )}\n    {props.error && (\n      <p className=\"weather__key\">\n        <span className=\"weather__error\"> {props.error}</span>\n      </p>\n    )}\n  </div>\n);\n\nexport default Weather;\n","import React, { Component } from \"react\";\n\nimport Title from \"./components/Title\";\nimport InputForm from \"./components/InputForm\";\nimport Weather from \"./components/Weather\";\n\nconst API_KEY = \"0ba5bddf480ccd34702a3d134534e8aa\";\n\nclass App extends Component {\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  };\n\n  fetchWeather = async e => {\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n    const api_call = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}`\n    );\n    const data = await api_call.json();\n    if (city && country) {\n      console.log(data);\n      this.setState({\n        temperature: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        error: \"\"\n      });\n    } else {\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: \"You Have To Specify Both The Input  Fields\"\n      });\n    }\n  };\n\n  state = {};\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <div className=\"main\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-xs-5 title-container\">\n                <Title />\n              </div>\n              <div className=\"col-xs-7 form-container\">\n                <InputForm fetchWeather={this.fetchWeather} />\n                <Weather\n                  temperature={this.state.temperature}\n                  city={this.state.city}\n                  country={this.state.country}\n                  humidity={this.state.humidity}\n                  description={this.state.description}\n                  error={this.state.error}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport \"./App.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}